● クライアントからリクエストを受けとり、コントローラー処理が行われる前後に処理を追加する仕組み。
    (ログインしていないと実行出来ないように制限をかけたい場合(認証チェック)などでミドルウェアの機能を利用する
    = フィルタリングとしての機能)
    複数あるコントローラーに、共通のミドルウェア処理を付与することができる。
    共通の処理を記述する箇所 app/Http/Middleware
    反映させる為に、ルートファイルに記述 web.php

● ミドルウェアの作成手順
【1】artisanコマンドでミドルウェアのスケルトンを生成
    (⇨ php artisan make:middleware MyMiddleware
    ↑で、app/Http/Middleware/MyMiddleware.phpが生成される)

【2】ミドルウェアの編集
    (artisanコマンドで作成したミドルウェアのクラスにはhandleメソッドがある
    ここでミドルウェアで処理をするプログラムを記載する)
    (アプリケーションを次に進めるには、$nextコールバックを呼び出す
    → return $next($request))

【3】ミドルウェアの登録
    (ミドルウェアを作っただけでは使えない。
    → /app/Http/Kernel.php でミドルウェアを登録する必要がある

    ミドルウェアを登録するポイントは3つ

    ⇨ 全ての処理に共通して処理を行う場合・・・$middleware に登録します。
    (各ルートで呼ばれたときに実行されるミドルウェアをここで登録
    ここで登録されたミドルウェアはRouterでも指定無しでどんな処理に対しても割り込んで追加処理を行う)

    ⇨ 複数のミドルウェアをまとめて(グループ)登録する場合・・・$middlewareGroups に登録
    (幾つかのミドルウェアはいくつか組み合わせて使われる場合がある
    この場合はKernelの$middlewareGroupsに名前をつけてまとめておくことができる
    'web' => [] みたいな感じでグループごとにまとめられる)

    ⇨ 単体で使うミドルウェアを登録しておく場合・・・$routeMiddleware にキーと共に登録

【4】ミドルウェアの設定
    ミドルウェアの設定は主2つ

    ⇨１ ルーターでミドルウェアを使用する
        ○ 普通に指定する
        ○ ミドルウェアを複数指定する
        ○ グループで指定する



    (2)コントローラでミドルウェアを使用する


●
●
●
●
●
●
